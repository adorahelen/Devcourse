package self.studyJava;

public class Day_0718 {
    public static void main(String[] args) {
        Carr GreeenCar = new Carr("Gree", "르노", "ture", 1000);
        /*
         * OOP 객체지향 특징
         * 프로그램을 부분별로 만들어서 통합하고 전체를 구성한다.
         *
         *주요 개념
         * - 객체
         * - 클래스
         * - 메시지
         * - 캡슐화
         * - 정보 숨김 (은닉) [퍼블릭, 프라이빗
         * - 상속
         * - 다형성
         * - 추상화
         *
         *
         * 자동차 객체들은 ( 빨간카,. 파란 카,. 노ㅓ란 카. 초록카
         * 클래스를 통해서 만든다 (패턴 - 자동차 클래스 )
         * == 클래스는 객체를 생성하기 위한 설계도
         * 클래스로 부터 만들어진 것들은 객체
         * 그 객체 하나를 지칭하는 것은 인스턴스
         * 객체를 클래스로 부터 생성해내는 과정은 인스턴스 화
         *
         * 클래스 정의 문법
         * [ 접근 제어자 ] 퍼블릭, 디폴트, 프라이빗
         * [ 클래스 종류 ] 스태틱, 파이널, 추상화 등
         *
         *
         *
         * 생성자는 객체를 생성할 때 호출되는 "특수 메서드"
         *  - 메모리 할당 및 객체의 필드 값 초기화
         *   ( new 연산자로 호출한다 { 만약 이게 퍼블릭 아니라 프라이빗이면 다른 방법으로 호출
         * // Cae 클래스의 기본 생성자 호출  redcar = new Car();
         * Car BlueCar = new Car ("KIA"); (이건 자동 생성 안됨)
         *
         * - 생성자 정의 방법
         * 클래스 이름과 동일, Return 타입은 선언하지 않는다.
         * 접근제어자는 보통 Public
         *  * 싱클톤 패턴일 때는 프라이빗
         *  - 오버로딩 가능 (같은 이름의 다른 매개변수나 다른 함수로 동작하도록 )
         * - 필수는 아님
         * - 상속 불가능
         *
         * - - -기본 생성자 디폴트는
         * 매개변수가 없는 생성자
         * 생성자 정의가 전혀 없는 경우 컴파일러가 추가
         *
         * // 기본 생성자 - 생성자 하나도 추가하지 않은 경우 자동으로 추가
         *
         *  public Car (String maker) {
         *  this.maker = maker
         *
         * */


        // 모든 필드의 값을 매개변수로 받아서 초기화하는 생성자를 이용하여
        // Car 클래스의 객체 그린 카를 만들어라
        // 색상은 그린, 선루프 없음. 각격은 천, 제조사는 르노

    }
}





